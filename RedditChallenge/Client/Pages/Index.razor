@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using RedditChallenge.Shared.Model
@using RedditChallenge.Shared.Services
@using RedditChallenge.Client.Shared
@inject NavigationManager Navigation

<PageTitle>Reddit Challenge</PageTitle>
<RadzenText TextStyle="TextStyle.H3">Reddit Statistics Challenge</RadzenText>


<RadzenRow>
    <RadzenColumn>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="3">
            <RadzenDropDown @bind-Value="_selectedSubreddit" Data="@Subreddits" Disabled="@(_monitorStatus == "Running")" TValue="string" Placeholder="Select a Subreddit" Style="width: 300px" />
                <RadzenButton Click="StartMonitor" Disabled="@(_selectedSubreddit==null || _monitorStatus == "Running")">Start Monitor</RadzenButton>
                <RadzenButton Click="StopMonitor" Disabled="@(_monitorStatus != "Running")">Stop Monitor</RadzenButton>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn>
         <div>
            <p>Status: @_monitorStatus</p>
            <p>Last Event: @_lastEvent</p>
        </div>
    </RadzenColumn>
  
</RadzenRow>
<RadzenRow>
@if (_redditStatistics != null){
    <RadzenColumn>
        <RedditPostTile 
            Title="Top Post By UpVotes" 
            RedditPost="@_redditStatistics?.TopUpVotedPost"
        />    
    </RadzenColumn>
    <RadzenColumn>
        <RedditAuthorTile 
            Title="Top Author By Posts" 
            Author="@_redditStatistics?.TopAuthorByPosts"
            TotalLabel="Posts"
            Total="@_redditStatistics?.TopAuthorPostCount"
        />
    </RadzenColumn>
    <RadzenColumn>
        <RedditAuthorTile 
            Title="Top Author By UpVotes" 
            Author="@_redditStatistics?.TopAuthorByUpVotes"
            TotalLabel="UpVotes"
            Total="@_redditStatistics?.TopAuthorByUpVotesCount"
        />

    </RadzenColumn>
}
</RadzenRow>

@if (_monitorHistory.Count > 0){
<RadzenText TextStyle="TextStyle.H6">Monitor Stats</RadzenText>
<RadzenRow>
    <RadzenColumn>
        <ApiMonitorLineGraph Data="@_monitorHistory"/>
    </RadzenColumn>
    <RadzenColumn>
       <ApiMonitorGauge Message="@_monitorHistory.Last()"/>
    </RadzenColumn>
</RadzenRow>
}


@code {

	IEnumerable<string> Subreddits = new List<string> { "csharp", "programminghumor", "technology", "science", "askreddit","memes" };

	private string? _selectedSubreddit;
    private HubConnection? _hubConnection;
    private string _monitorStatus = "Stopped";
    private string _lastEvent = "";

    private RedditStatistics? _redditStatistics;

    private List<MonitorStatsMessage> _monitorHistory = new();

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/subreddithub"))
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(30) })
            .Build();

        _hubConnection.On<MonitorStatsMessage>("ReceiveMonitorStats", (stats) =>
        {
            _monitorHistory.Add(stats);
            if (_monitorHistory.Count > 100) _monitorHistory.RemoveAt(0);

            _monitorStatus = stats.IsRunning ? "Running" : "Stopped";
            StateHasChanged();
        });

        _hubConnection.On<MonitorSubredditStatsMessage>("ReceiveSubredditStats", (eventMessage) =>
        {   
            _redditStatistics = eventMessage.stats;
            StateHasChanged();
        });
        _hubConnection.On<MonitorEventMessage>("ReceiveMonitorEvent", (eventMessage) =>
        {
            _lastEvent = $"{eventMessage.Timestamp}: {eventMessage.Message}";
            if (eventMessage.Message.Contains("[STOP]")){
                _monitorStatus = "Stopped";
            }
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task StartMonitor()
    {
        if (_hubConnection is null){return;}
        //Clear the monitor history.
        _monitorHistory = new();
        await _hubConnection.InvokeAsync("StartSubredditLoop", _selectedSubreddit);
    }

    private async Task StopMonitor()
    {
        if (_hubConnection is null){return;}
        await _hubConnection.InvokeAsync("StopSubredditLoop");
    }


}
