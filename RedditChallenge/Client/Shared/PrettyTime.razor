@using System.ComponentModel.DataAnnotations;

<!-- The 'span' element is used to display the formatted time. Any additional HTML attributes passed to this component are applied using the @AdditionalAttributes dictionary. -->
<span @attributes="@AdditionalAttributes">@FormatTime()</span>

@code {
    // Parameter to capture any additional attributes for the 'span' element.
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    // Parameter to receive a TimeSpan value from the parent component.
    [Parameter]
    public TimeSpan? Time { get; set; }

    // Method to format the TimeSpan into a user-friendly string.
    private string FormatTime()
    {
        if (Time != null)
        {
            // Extract minutes, seconds, and milliseconds from the TimeSpan.
            int minutes = Time.Value.Minutes; // Number of minutes in the TimeSpan.
            int seconds = Time.Value.Seconds; // Number of seconds in the TimeSpan.
            int milliseconds = Time.Value.Milliseconds; // Number of milliseconds in the TimeSpan.

            // Format the string depending on whether there are minutes present.
            if (minutes > 0)
            {
                // If there are minutes, format as mm:ss.milliseconds.
                return $"{minutes:D2}:{seconds:D2}.{milliseconds:D3}";
            }
            else
            {
                // If there are no minutes, format as ss.milliseconds.
                return $"{seconds:D2}.{milliseconds:D3}";
            }
        }

        // Return a default message if the Time parameter is null.
        return "Invalid selection";
    }
}
